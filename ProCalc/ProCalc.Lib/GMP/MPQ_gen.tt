<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
    var stdExtras = new [] {"GMP.mpq_canonicalize(ref S);"};

    var classDef = new ClassDef()
    {
        Name = "MPQ",
        Inits = new []
        {
            new InitDef { Sig = "int a", Chain = ": this()", Func = "mpq_set_si", Args = "a, 1", Extras = stdExtras },
            new InitDef { Sig = "int a, uint b", Chain = ": this()", Func = "mpq_set_si", Args = "a, b", Extras = stdExtras },
            new InitDef { Sig = "uint a", Chain = ": this()", Func = "mpq_set_ui", Args = "a, 1", Extras = stdExtras },
            new InitDef { Sig = "uint a, uint b", Chain = ": this()", Func = "mpq_set_ui", Args = "a, b", Extras = stdExtras },
            new InitDef { Sig = "long a", Chain = ": this(a.ToString())" },
            new InitDef { Sig = "long a, ulong b", Chain = ": this(string.Format(\"{0}/{1}\", a, b))" },
            new InitDef { Sig = "ulong a", Chain = ": this(a.ToString())" },
            new InitDef { Sig = "ulong a, ulong b", Chain = ": this(string.Format(\"{0}/{1}\", a, b))" },
            new InitDef { Sig = "double a", Chain = ": this()", Func = "mpq_set_d", Args = "a", Extras = stdExtras },
            new InitDef { Access = "internal", Sig = "ref GMP.mpq_t a", Chain = ": this()", Func = "mpq_set", Args = "ref a" },
            new InitDef { Sig = "MPQ a", Chain = ": this(ref a.S)" },
            new InitDef { Access = "internal", Sig = "ref GMP.mpz_t a", Chain = ": this()", Func = "mpq_set_z", Args = "ref a", Extras = stdExtras },
            new InitDef { Sig = "MPZ a", Chain = ": this(ref a.S)" },
            new InitDef { Access = "internal", Sig = "ref GMP.mpz_t a, ref GMP.mpz_t b", Chain = ": this()", Extras = new [] { "GMP.mpz_set(ref S._mp_num, ref a);", "GMP.mpz_set(ref S._mp_den, ref b);" }.Concat(stdExtras).ToArray() },
            new InitDef { Sig = "MPZ a, MPZ b", Chain = ": this(ref a.S, ref b.S)" },
        },
        Convs = new []
        {
            new ConvDef { Type = "MPZ", Mode = "implicit", },
            new ConvDef { Type = "int", Mode = "implicit", },
            new ConvDef { Type = "uint", Mode = "implicit", },
            new ConvDef { Type = "long", Mode = "implicit", },
            new ConvDef { Type = "ulong", Mode = "implicit", },
            new ConvDef { Type = "double", Mode = "explicit", },
        },
        Ops = new []
        {
            new OpDef { Op = "-", Sig = "MPQ a", Func = "mpq_neg", Args = "ref a.S" },
            new OpDef { Op = "+", Sig = "MPQ a, MPQ b", Func = "mpq_add", Args = "ref a.S, ref b.S" },
            new OpDef { Op = "-", Sig = "MPQ a, MPQ b", Func = "mpq_sub", Args = "ref a.S, ref b.S" },
            new OpDef { Op = "*", Sig = "MPQ a, MPQ b", Func = "mpq_mul", Args = "ref a.S, ref b.S" },
            new OpDef { Op = "/", Sig = "MPQ a, MPQ b", Func = "mpq_div", Args = "ref a.S, ref b.S" },
        },
        Gets = new []
        {
            new GetDef { Name = "Abs", Sig = "", Func = "mpq_abs", Args = "ref S" },
            new GetDef { Name = "Inv", Sig = "", Func = "mpq_inv", Args = "ref S" },
        },
        Funcs = new[]
        {
            new FuncDef { Name = "Add", Sig = "MPQ b", Func = "mpq_add", Args = "ref S, ref b.S" },
            new FuncDef { Name = "Add", Access = "internal", Sig = "ref GMP.mpq_t b", Func = "mpq_add", Args = "ref S, ref b" },

            new FuncDef { Name = "Sub", Sig = "MPQ b", Func = "mpq_sub", Args = "ref S, ref b.S" },
            new FuncDef { Name = "Sub", Access = "internal", Sig = "ref GMP.mpq_t b", Func = "mpq_sub", Args = "ref S, ref b" },
            
            new FuncDef { Name = "Mul", Sig = "MPQ b", Func = "mpq_mul", Args = "ref S, ref b.S" },
            new FuncDef { Name = "Mul", Access = "internal", Sig = "ref GMP.mpq_t b", Func = "mpq_mul", Args = "ref S, ref b" },
            
            new FuncDef { Name = "Div", Sig = "MPQ b", Func = "mpq_div", Args = "ref S, ref b.S" },
            new FuncDef { Name = "Div", Access = "internal", Sig = "ref GMP.mpq_t b", Func = "mpq_div", Args = "ref S, ref b" },
        },
    };
#>
<#@ include file="std_gen.tt" #>