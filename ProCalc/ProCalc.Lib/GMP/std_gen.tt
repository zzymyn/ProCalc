using System;

namespace ProCalc.Lib.GMP
{
    public partial class <#=classDef.Name#>
    {
        // Constructors:
<#
        foreach (var op in classDef.Inits)
        {
#>
        <#=op.Access#> <#=classDef.Name#>(<#=op.Sig#>) <#=op.Chain ?? ""#>
        {
<#
            if (op.Func != null)
            {
#>
            GMP.<#=op.Func#>(ref S, <#=op.Args#>);
<#
            }
            foreach (var e in op.Extras)
            {
#>
            <#=e#>
<#
            }
#>
        }

<#
        }
#>
        // Conversions:
<#
        foreach (var op in classDef.Convs)
        {
#>
        public static <#=op.Mode#> operator <#=classDef.Name#>(<#=op.Type#> a)
        {
            return new <#=classDef.Name#>(a);
        }

<#
        }
#>
        // Operators:
<#
        foreach (var op in classDef.Ops)
        {
#>
        <#=op.Access#> static <#=classDef.Name#> operator <#=op.Op#>(<#=op.Sig#>)
        {
            var r = new <#=classDef.Name#>();
            GMP.<#=op.Func#>(ref r.S, <#=op.Args#>);
            return r;
        }

<#
        }
#>
        // Funcs:
<#
        foreach (var op in classDef.Gets)
        {
#>
        <#=op.Access#> <#=classDef.Name#> <#=op.Name#>(<#=op.Sig#>)
        {
            var r = new <#=classDef.Name#>();
            GMP.<#=op.Func#>(ref r.S, <#=op.Args#>);
            return r;
        }

<#
        }
#>
<#
        foreach (var op in classDef.Funcs)
        {
#>
        <#=op.Access#> <#=classDef.Name#> <#=op.Name#>(<#=op.Sig#>)
        {
            GMP.<#=op.Func#>(ref S, <#=op.Args#>);
            return this;
        }

<#
        }
#>
        // Comparison ops:
<#
        foreach (var op in new [] {"<", ">", "<=", ">=", "==", "!=" })
        {
#>
        public static bool operator <#=op#>(<#=classDef.Name#> a, <#=classDef.Name#> b)
        {
            return a.CompareTo(b) <#=op#> 0;
        }

<#
        }
#>
    }
}
<#+

class ClassDef
{
    public string Name = null;
    public InitDef[] Inits = new InitDef[0];
    public ConvDef[] Convs = new ConvDef[0];
    public OpDef[] Ops = new OpDef[0];
    public GetDef[] Gets = new GetDef[0];
    public FuncDef[] Funcs = new FuncDef[0];
}

class InitDef
{
    public string Access = "public";
    public string Sig = null;
    public string Args = null;
    public string Chain = null;
    public string Func = null;
    public string[] Extras = new string[0];
}

class ConvDef
{
    public string Type = null;
    public string Mode = null;
}

class OpDef
{
    public string Op = null;
    public string Access = "public";
    public string Sig = null;
    public string Args = null;
    public string Func = null;
}

class GetDef
{
    public string Name = null;
    public string Access = "public";
    public string Sig = null;
    public string Args = null;
    public string Func = null;
}

class FuncDef
{
    public string Name = null;
    public string Access = "public";
    public string Sig = null;
    public string Args = null;
    public string Func = null;
}

#>