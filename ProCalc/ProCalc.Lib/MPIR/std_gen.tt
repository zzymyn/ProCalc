using System;

namespace ProCalc.Lib.MPIR
{
    public partial class <#= classDef.Name #>
    {
        // Constructors:
<#
        foreach (var op in classDef.Inits)
        {
#>
        <#= op.Access #> <#= classDef.Name #>(<#= op.Sig #>) <#= op.Chain ?? "" #>
        {
<#
            if (op.Func != null)
            {
#>
            MPIR.<#= op.Func #>(ref S, <#= op.Args #>);
<#
            }
            foreach (var e in op.Extras)
            {
#>
            <#= e #>
<#
            }
#>
        }

<#
        }
#>
        // Conversions:
<#
        foreach (var op in classDef.Convs)
        {
#>
        public static <#= op.Mode #> operator <#= classDef.Name #>(<#= op.Type #> a)
        {
            return new <#= classDef.Name #>(a);
        }

<#
        }
#>
        // Operators:
<#
        foreach (var op in classDef.Ops)
        {
#>
        <#= op.Access #> static <#= classDef.Name #> operator <#= op.Op #>(<#= op.Sig #>)
        {
            var r = new <#= classDef.Name #>();
            MPIR.<#= op.Func #>(ref r.S, <#= op.Args #>);
            return r;
        }

<#
        }
#>
        // Funcs:
<#
        foreach (var op in classDef.Gets)
        {
#>
        <#= op.Access #> <#= classDef.Name #> <#= op.Name #>(<#= op.Sig #>)
        {
            var r = new <#= classDef.Name #>();
            MPIR.<#= op.Func #>(ref r.S, <#= op.Args #>);
            return r;
        }

<#
        }
#>
<#
        foreach (var op in classDef.Funcs)
        {
#>
        <#= op.Access #> <#= classDef.Name #> <#= op.Name #>(<#= op.Sig #>)
        {
            MPIR.<#= op.Func #>(ref S, <#= op.Args #>);
            return this;
        }

<#
        }
#>
        // Comparison ops:
<#
        foreach (var op in new [] {"<", ">", "<=", ">=", "==", "!=" })
        {
#>
        public static bool operator <#= op #>(<#= classDef.Name #> a, <#= classDef.Name #> b)
        {
            return a.CompareTo(b) <#= op #> 0;
        }

<#
        }
#>
    }
}
<#+

class ClassDef
{
    public string Name;
    public InitDef[] Inits;
    public ConvDef[] Convs;
    public OpDef[] Ops;
    public GetDef[] Gets;
    public FuncDef[] Funcs;
}

class InitDef
{
    public string Access = "public";
    public string Sig;
    public string Args;
    public string Chain;
    public string Func;
    public string[] Extras = new string[0];
}

class ConvDef
{
    public string Type;
    public string Mode;
}

class OpDef
{
    public string Op;
    public string Access = "public";
    public string Sig;
    public string Args;
    public string Func;
}

class GetDef
{
    public string Name;
    public string Access = "public";
    public string Sig;
    public string Args;
    public string Func;
}

class FuncDef
{
    public string Name;
    public string Access = "public";
    public string Sig;
    public string Args;
    public string Func;
}

#>