<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="EnvDTE" #>
<#

var MPIRRegex = new Regex(@"__GMP_DECLSPEC\s*(?<ReturnType>[ _a-zA-Z0-9*/]+?)\s*(?<Name>\w+)\s*__GMP_PROTO\s*\(\((?<Args>[ _a-zA-Z0-9*.]+)(,\s*(?<Args>[ _a-zA-Z0-9*.]+))*\)\)(\s*\w+)*");

var dte = (EnvDTE.DTE) ((IServiceProvider)Host).GetService(typeof(EnvDTE.DTE));
var solutionDir = Path.GetDirectoryName(dte.Solution.FullName);
var mpirHeader = Path.Combine(solutionDir, "..", "mpir", "mpir.h");

#>
using System;
using System.Text;
using System.Runtime.InteropServices;

namespace ProCalc.Lib.MPIR
{
    internal static partial class MPIR
    {
<#

foreach (var line in File.ReadLines(mpirHeader))
{
    var m = MPIRRegex.Match(line);
    if (!m.Success)
        continue;

    var name = m.Groups["Name"].Value;
    var returnType = ConvertReturnType(m.Groups["ReturnType"].Value);
    var args = m.Groups["Args"].Captures.Cast<Capture>()
        .Select(a => ConvertArgType(a.Value));

    if (string.IsNullOrEmpty(returnType) || args.Any(a => string.IsNullOrEmpty(a)))
    {
#>
        // Skipped <#= name #> - <#= string.Join(",", m.Groups["Args"].Captures.Cast<Capture>().Select(a => a.Value)) #> => <#= m.Groups["ReturnType"].Value #>
<#
        continue;
    }

    var argsWithNames = AddArgNames(args);

#>
        [DllImport("mpir.dll", EntryPoint = "__g<#=name#>")]
        internal static extern <#= returnType #> <#= name #>(<#= string.Join(", ", argsWithNames) #>);
<#
}

#>
    }
}

<#+

string ConvertReturnType(string mpirType)
{
    switch (mpirType)
    {
    case "void":
        return "void";
    case "int":
        return "int";
    case "mpir_si":
        return "long";
    case "/* signed */ mpir_si":
        return "long";
    case "mp_bitcnt_t":
        return "ulong";
    case "mp_limb_t":
        return "ulong";
    case "mpir_ui":
        return "ulong";
    case "size_t":
        return "ulong";
    case "double":
        return "double";
    case "char *":
        return "/* char* */ IntPtr";
    case "void *":
        return "/* void* */ IntPtr";
    default:
        return null;
    }
}

string ConvertArgType(string mpirType)
{
    switch (mpirType)
    {
    case "...":
        return "__arglist";
    case "mpz_ptr":
        return "[In, Out] ref mpz_t";
    case "mpz_srcptr":
        return "[In] ref mpz_t";
    case "mpf_ptr":
        return "[In, Out] ref mpf_t";
    case "mpf_srcptr":
        return "[In] ref mpf_t";
    case "mpq_ptr":
        return "[In, Out] ref mpq_t";
    case "mpq_srcptr":
        return "[In] ref mpq_t";
    case "__gmp_const char *":
        return "string";
    case "char *":
        return "StringBuilder";
    case "__gmp_const void *":
        return "/* const void* */ IntPtr";
    case "void *":
        return "/* void* */ IntPtr";
    case "mp_bitcnt_t":
        return "ulong";
    case "mp_limb_t":
        return "ulong";
    case "mp_size_t":
        return "ulong";
    case "mp_exp_t":
        return "int";
    case "mp_exp_t *":
        return "ref int";
    case "int":
        return "int";
    case "double":
        return "double";
    case "mpir_si":
        return "long";
    case "mpir_ui":
        return "ulong";
    case "size_t":
        return "ulong";
    case "size_t *":
        return "ref ulong";
    default:
        return "";
    }
}

IEnumerable<string> AddArgNames(IEnumerable<string> types)
{
    int i = 0;
    foreach (var t in types)
    {
        if (t == "__arglist")
            yield return t;
        else
            yield return t + " a" + i.ToString();
        ++i;
    }
}

#>